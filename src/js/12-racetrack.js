import { resolve } from "core-js/fn/promise";
import { reject } from "lodash";
import "../css/common3.css";

let raceCounter = 0;
const horses = [
  "Secretariat",
  "Eclipse",
  "West Australian",
  "Flying Fox",
  "Seabiscuit",
];
const refs = {
  startBtn: document.querySelector(".js-start-race"),
  winnerField: document.querySelector(".js-winner"),
  progressField: document.querySelector(".js-progress"),
  tableBody: document.querySelector(".js-results-table > tbody"),
  updateWinnerField(message) {
    refs.winnerField.textContent = message;
    //—Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
  },
  updateProgressField(message) {
    refs.progressField.textContent = message;
    //—Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  },
  updateResultTable({ horse, time, raceCounter }) {
    const tr = `<tr><td>${raceCounter}</td><td>${horse}</td><td>${time}</td></tr>`;
    refs.tableBody.insertAdjacentHTML("beforeend", tr);
    //—Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—á–∫–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
  },
  showWinner(horses) {
    Promise.race(horses).then(({ horse, time }) => {
      refs.updateWinnerField(
        `üéâ –ü–æ–±–µ–¥–∏–ª ${horse}, —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–≤ –∑–∞ ${time} –≤—Ä–µ–º–µ–Ω–∏`
      );
      // –≤—ã–≤–æ–¥–∏–º –≤ –ø–æ–ª–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Å—Ç—Ä–æ–∫—É
      refs.updateResultTable({ horse, time, raceCounter });
      // –∑–∞–ø–∏—Å—É–µ–º –≤ —Ç–∞–±–ª–∏—á–∫—É –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (–ø–µ—Ä–µ–¥–∞–µ–º –∏–∑ –æ–±—ä–µ–∫—Ç–∞ horse, time + raceCounter (let raceCounter))
    });
    // Promise.race => –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º—ã–π –±—ã—Å—Ç—Ä–æ –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π—Å—è –ø—Ä–æ–º–∏—Å (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç) === —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–≤—ã–π –ø—Ä–æ–º–∏—Å
  },
  waitingRestHorses(horses) {
    Promise.all(horses).then(
      () => refs.updateProgressField("üìù –ó–∞–µ–∑–¥ –æ–∫–æ–Ω—á–µ–Ω, –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å—Ç–∞–≤–∫–∏.")
      // –≤—ã–≤–æ–¥–∏–º –≤ –ø–æ–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å—Ç—Ä–æ–∫—É
    );
    //Promise.all => –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–º–∏—Å–∞–º–∏ (–ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è) === —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∞—Å—Å–∏–≤
  },
  onStart() {
    raceCounter += 1;
    refs.updateWinnerField("");
    // –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –æ–±–Ω—É–ª—è–µ–º –ø–æ–ª–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    refs.updateProgressField("");
    // –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –æ–±–Ω—É–ª—è–µ–º –ø–æ–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const horsesPromises = horses.map(run); // horses.map((horse) => run);
    //—Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ–≤–∏—Å–æ–≤ === –º—ã –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –º–∞—Å—Å–∏–≤—É –ª–æ—à–∞–¥–µ–π, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é Run
    refs.updateProgressField("ü§ñ –ó–∞–µ–∑–¥ –Ω–∞—á–∞–ª—Å—è, —Å—Ç–∞–≤–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è!");
    // –≤—ã–≤–æ–¥–∏–º –≤ –ø–æ–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å—Ç—Ä–æ–∫—É
    refs.showWinner(horsesPromises);
  },
};

refs.startBtn.addEventListener("click", refs.onStart);

function getRandomTime(min, max) {
  return Math.floor(Math.random() * (max - min + 1) + min);
}
//—Ä–∞–Ω–¥–æ–º–Ω–æ–µ –≤—Ä–µ–º—è (–ø–æ–ª—É—á–∞–µ—Ç –º–∏–Ω –∏ –º–∞–∫—Å –≤—Ä–µ–º—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è)

function run(horse) {
  return new Promise((resolve, reject) => {
    const time = getRandomTime(1000, 2000);
    setTimeout(() => {
      resolve({ horse, time });
    }, time);
  });
}
// —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–º—É–ª–∏—Ä—É–µ—Ç –∑–∞–±–µ–≥

// run("Secretariat")
//   .then((x) => console.log(x))
//   .catch();

// console.log(`–º–∞—Å—Å–∏–≤ –ø—Ä–æ–º–∏—Å–æ–≤`, horsesAllStart);

// /*
//  * Promise.race([]) –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–∏–≤—à–µ–≥–æ—Å—è –ø—Ä–æ–º–∏—Å–∞
//  */

// /*
//  * Promise.all([]) –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–º–∏—Å–æ–≤
//  */

// let raceCounter = 0;
// const refs = {
//   startBtn: document.querySelector(".js-start-race"),
//   winnerField: document.querySelector(".js-winner"),
//   progressField: document.querySelector(".js-progress"),
//   tableBody: document.querySelector(".js-results-table > tbody"),
// };

// refs.startBtn.addEventListener("click", onStart);

// function onStart() {
//   raceCounter += 1;
//   const promises = horses.map(run);

//   updateWinnerField("");
//   updateProgressField("ü§ñ –ó–∞–µ–∑–¥ –Ω–∞—á–∞–ª—Å—è, —Å—Ç–∞–≤–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è!");
//   determineWinner(promises);
//   waitForAll(promises);
// }

// function determineWinner(horsesP) {
//   Promise.race(horsesP).then(({ horse, time }) => {
//     updateWinnerField(`üéâ –ü–æ–±–µ–¥–∏–ª ${horse}, —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–≤ –∑–∞ ${time}
//     –≤—Ä–µ–º–µ–Ω–∏`);
//     updateResultsTable({ horse, time, raceCounter });
//   });
// }

// function waitForAll(horsesP) {
//   Promise.all(horsesP).then(() => {
//     updateProgressField("üìù –ó–∞–µ–∑–¥ –æ–∫–æ–Ω—á–µ–Ω, –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å—Ç–∞–≤–∫–∏.");
//   });
// }

// function updateWinnerField(message) {
//   refs.winnerField.textContent = message;
// }

// function updateProgressField(message) {
//   refs.progressField.textContent = message;
// }

// function updateResultsTable({ horse, time, raceCounter }) {
//   const tr = `<tr><td>${raceCounter}</td><td>${horse}</td><td>${time}</td></tr>`;
//   refs.tableBody.insertAdjacentHTML("beforeend", tr);
// }

// /*
//  * Promise.race([]) –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–∏–≤—à–µ–≥–æ—Å—è –ø—Ä–æ–º–∏—Å–∞
//  */

// /*
//  * Promise.all([]) –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–º–∏—Å–æ–≤
//  */

// function run(horse) {
//   return new Promise((resolve) => {
//     const time = getRandomTime(2000, 3500);

//     setTimeout(() => {
//       resolve({ horse, time });
//     }, time);
//   });
// }
